name: Build nezha-agent binary

on:
  workflow_run:
    workflows: ["Run Tests"]
    branches: [main]
    types:
      - completed
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'nezhahq/agent'
          fetch-depth: '1'

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: Set up Goreleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          install-only: true

      - name: Set env
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "RELEASE_VERSION=$(date +%Y.%m.%d-%H%M)" >> $GITHUB_ENV
          else
            echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi

      - name: Echo env
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}

      - name: Build binaries
        env:
          GORELEASER_CURRENT_TAG: ${{ env.RELEASE_VERSION }}
        run: goreleaser build --snapshot --clean

      - name: Compress with UPX
        run: |
          latest_url=$(wget -qO- https://github.com/upx/upx/releases/latest | grep -oP 'https://github.com/upx/upx/releases/download/v[\d.]+/upx-[\d.]+-amd64_linux\.tar\.xz')
          echo $latest_url
          wget $latest_url
          tar -Jxf upx*.tar.xz
          sudo cp upx*/upx /usr/bin
          upx -9 dist/*/*

      - name: Upload dist
        uses: actions/upload-artifact@v3
        with:
          name: nezha-agent
          path: dist/
              
      - name: Generate release tag
        id: tag
        run: echo "release_tag=${{ env.RELEASE_VERSION }}" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_KEY }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: dist/**/*

      - name: Remove old releases and tags
        run: |
          release_ids=$(gh release list --repo mjjonone/nezha-agent-binary --limit 100 | awk 'NR>2 {print \$1}')
          for release_id in $release_ids; do
            gh release delete --repo mjjonone/nezha-agent-binary $release_id --yes || true
          done
          tag_names=$(gh api repos/mjjonone/nezha-agent-binary/git/refs/tags --jq '.[].ref' | sed 's/refs\/tags\///' | tail -n +3)
          for tag in $tag_names; do
            gh api --method DELETE /repos/mjjonone/nezha-agent-binary/git/refs/tags/$tag || true
          done
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_KEY }}
          
      - name: Clean workflow runs
        run: |
          run_ids=$(gh api -X GET /repos/mjjonone/nezha-agent-binary/actions/runs | jq -r '.workflow_runs | sort_by(.run_number) | reverse | .[2:] | .[].id')
          for run_id in $run_ids; do
            gh api -X DELETE /repos/mjjonone/nezha-agent-binary/actions/runs/$run_id || true
          done
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_KEY }}
